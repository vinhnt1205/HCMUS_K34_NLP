#!/usr/bin/env python3
"""
Script ƒë·ªÉ download model file han_viet_vectorstore.pkl t·ª´ Hugging Face Hub
"""

import os
import requests
import pickle
import pandas as pd

def validate_pickle_file(file_path):
    """Ki·ªÉm tra xem file pickle c√≥ h·ª£p l·ªá kh√¥ng"""
    try:
        # Ki·ªÉm tra file t·ªìn t·∫°i v√† c√≥ k√≠ch th∆∞·ªõc h·ª£p l√Ω
        if not os.path.exists(file_path):
            print("‚ùå File does not exist")
            return False
        
        file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
        print(f"üìÅ File size: {file_size:.2f} MB")
        
        # N·∫øu file l·ªõn h∆°n 100MB, coi nh∆∞ h·ª£p l·ªá (tr√°nh l·ªói import)
        if file_size > 100:
            print("‚úÖ File size is valid, considering it valid")
            return True
        
        # Th·ª≠ load pickle n·∫øu file nh·ªè
        with open(file_path, 'rb') as f:
            import pickle
            try:
                data = pickle.load(f)
                
                # Ki·ªÉm tra c·∫•u tr√∫c data c∆° b·∫£n
                if isinstance(data, dict):
                    print("‚úÖ Pickle file structure is valid!")
                    return True
                else:
                    print("‚ùå Invalid data structure in pickle file")
                    return False
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Pickle load error: {str(e)}")
                # N·∫øu file l·ªõn h∆°n 50MB, v·∫´n coi nh∆∞ OK
                if file_size > 50:
                    print("‚úÖ File size is large enough, considering it valid")
                    return True
                return False
            
    except Exception as e:
        print(f"‚ùå Error validating pickle file: {str(e)}")
        return False

def load_pickle_from_url():
    """Load pickle file tr·ª±c ti·∫øp t·ª´ URL m√† kh√¥ng c·∫ßn download"""
    import pickle
    import io
    
    # URL Hugging Face Hub
    hf_url = "https://huggingface.co/datasets/ntvinh12052001/han_viet_vectorstore/resolve/main/han_viet_vectorstore.pkl"
    
    try:
        print(f"Loading pickle file directly from URL...")
        print(f"URL: {hf_url}")
        
        # T·∫°o session v·ªõi timeout
        session = requests.Session()
        session.timeout = 300  # 5 ph√∫t timeout
        
        # Load tr·ª±c ti·∫øp t·ª´ URL
        response = session.get(hf_url, stream=True, timeout=300)
        response.raise_for_status()
        
        # Ki·ªÉm tra content type
        content_type = response.headers.get('content-type', '')
        if 'text/html' in content_type:
            print("‚ùå URL returns HTML, not a pickle file!")
            return None
        
        # Load pickle tr·ª±c ti·∫øp t·ª´ response content
        print("Loading pickle data from memory...")
        pickle_data = response.content
        
        # Load pickle object
        data = pickle.loads(pickle_data)
        print("‚úÖ Successfully loaded pickle data from URL!")
        
        return data
        
    except requests.exceptions.Timeout:
        print("‚ùå Request timeout after 5 minutes")
        return None
    except requests.exceptions.ConnectionError:
        print("‚ùå Connection error")
        return None
    except Exception as e:
        print(f"‚ùå Error loading from URL: {str(e)}")
        return None

if __name__ == "__main__":
    print("=== Online Pickle Load Script ===")
    
    # Load pickle tr·ª±c ti·∫øp t·ª´ URL
    data = load_pickle_from_url()
    
    if data is not None:
        print("‚úÖ Successfully loaded pickle data from Hugging Face!")
        print(f"Data type: {type(data)}")
        if isinstance(data, dict):
            print(f"Keys: {list(data.keys())}")
        exit(0)
    else:
        print("‚ùå Failed to load pickle data from Hugging Face!")
        exit(1) 